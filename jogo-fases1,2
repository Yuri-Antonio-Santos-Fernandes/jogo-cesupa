#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#define MAP_SIZE_1 10
#define MAP_SIZE_2 20

typedef struct {
    int x;
    int y;
} Player;

void limparBuffer() {
    int c;
    while ((c = getchar()) != '\n' && c != EOF);
}

void mostrarTutorial() {
    system("cls");

    printf("##########################################\n");
    printf("#                TUTORIAL                #\n");
    printf("##########################################\n\n");

    printf("Bem-vindo ao tutorial!\n");
    printf("Use w, a, s, d para mover o jogador.\n");
    printf("O jogador interage com o objeto que esta em cima (i).\n");
    printf("&: Simbolo que representa o jogador.\n");
    printf("*: Simbolo que representa uma parede, o jogador ao se movimentar nao pode passar pela parede.\n");
    printf("@: Simbolo que representa a chave para abrir a porta para finalizar a fase, a porta abre no momento que o jogador interage com a chave.\n");
    printf("=: Simbolo que representa a porta aberta quando o jogador interage com a chave.\n");
    printf("O: Simbolo que representa um botao que o usuario pode interagir, o botao fica no chao e o jogador deve ficar em cima dele para poder interagir.\n");
    printf("#: Simbolo que representa um espinho. A fase e reiniciada quando o jogador toca no espinho, caso a fase seja reiniciada tres vezes, o jogo volta para o menu principal.\n");
    printf(">: Simbolo que representa um teletransporte. O teletransporte sempre deve vir em pares, quando o jogador toca em um ele e transportado para o outro e vice-versa.\n");
    printf("X: Simbolo que representa o monstro nivel 1. Esse monstro tem um movimento aleatorio para cima, para esquerda, para baixo e para direita. Caso o monstro toque no jogador, a fase e reiniciada.\n");
    printf("V: Simbolo que representa o monstro nivel 2. Esse monstro tem uma inteligencia para seguir o jogador (ha varias maneiras de implementar isso). Caso o monstro toque no jogador, a fase e reiniciada.\n");
    printf("Pressione qualquer tecla para voltar ao menu.\n");

    getchar();
    limparBuffer();
}

void movimentoAleatorio(int *dx, int *dy) {
    int direcao = rand() % 4;
    switch (direcao) {
        case 0: 
            *dx = -1;
            *dy = 0;
            break;
        case 1: 
            *dx = 1;
            *dy = 0;
            break;
        case 2: 
            *dx = 0;
            *dy = -1;
            break;
        case 3: 
            *dx = 0;
            *dy = 1;
            break;
    }
}

void movimentarMonstro(int *x, int *y, char map[MAP_SIZE_2][MAP_SIZE_2]) {
    int dx, dy;
    movimentoAleatorio(&dx, &dy);

    // Verificar se a próxima posição é válida
    int new_x = *x + dx;
    int new_y = *y + dy;
    if (new_x >= 0 && new_x < MAP_SIZE_2 && new_y >= 0 && new_y < MAP_SIZE_2 && map[new_x][new_y] != '*') {
        *x = new_x;
        *y = new_y;
    }
}

bool toquesMonstro(int player_x, int player_y, int monstro_x, int monstro_y) {
    return (player_x == monstro_x && player_y == monstro_y);
}

void jogarFase2();

void jogarFase1() {
    char map[MAP_SIZE_1][MAP_SIZE_1] = {
        {'*', '*', '*', '*', '*', '*', '*', '*', '*', '*'},
        {'*', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '*'},
        {'*', ' ', '*', '*', '*', '*', '*', ' ', ' ', '*'},
        {'*', ' ', ' ', ' ', ' ', ' ', '*', ' ', ' ', '*'},
        {'*', ' ', '*', '*', ' ', '*', '*', ' ', ' ', '*'},
        {'*', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '*'},
        {'*', ' ', '*', '*', '*', '*', '*', '*', '*', '*'},
        {'*', '@', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'D'},
        {'*', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '*'},
        {'*', '*', '*', '*', '*', '*', '*', '*', '*', '*'}
    };

    Player player = {1, 1};
    char comando[5]; 
    int chave_x = 7;
    int chave_y = 1;
    bool chavePega = false;
    bool portaDestrancada = false;
    int monstro_x = 5; // Posição inicial do monstro (linha)
    int monstro_y = 5; // Posição inicial do monstro (coluna)
    int toquesMonstroCount = 0; // Contador de toques no monstro
    int espinhosCount = 0; // Contador de toques nos espinhos
    int i, j;

    while (true) {
        system("cls");

        printf("##########################################\n");
        printf("#                FASE 1                  #\n");
        printf("##########################################\n\n");

        for (i = 0; i < MAP_SIZE_1; i++) {
            for (j = 0; j < MAP_SIZE_1; j++) {
                if (i == player.x && j == player.y)
                    printf("& ");
                else
                    printf("%c ", map[i][j]);
            }
            printf("\n");
        }

        printf("\nDigite um comando (w, a, s, d para mover; i para interagir; two2 para pular para a Fase 2): ");
        scanf("%4s", comando);
        limparBuffer();

        int dx = 0, dy = 0;
        if (strcmp(comando, "w") == 0)
            dx = -1;
        else if (strcmp(comando, "a") == 0)
            dy = -1;
        else if (strcmp(comando, "s") == 0)
            dx = 1;
        else if (strcmp(comando, "d") == 0)
            dy = 1;
        else if (strcmp(comando, "i") == 0) {
            if (player.x == chave_x && player.y == chave_y && !chavePega) {
                printf("Voce pegou a chave!\n");
                chavePega = true;
                map[chave_x][chave_y] = ' '; 
                portaDestrancada = true;

                // Abrir as portas automaticamente quando a chave é pega
                for (i = 0; i < MAP_SIZE_1; i++) {
                    for (j = 0; j < MAP_SIZE_1; j++) {
                        if (map[i][j] == 'D')
                            map[i][j] = '=';
                    }
                }
            } else if (map[player.x][player.y] == 'D' && chavePega) {
                printf("Voce abriu a porta!\n");
                map[player.x][player.y] = '='; 
                portaDestrancada = true;
            }
        } else if (strcmp(comando, "two2") == 0) {
            jogarFase2();
            return;
        } else {
            printf("Comando invalido. Tente novamente.\n");
        }

        int new_x = player.x + dx;
        int new_y = player.y + dy;
        if (new_x >= 0 && new_x < MAP_SIZE_1 && new_y >= 0 && new_y < MAP_SIZE_1 && map[new_x][new_y] != '*') {
            player.x = new_x;
            player.y = new_y;
        }

        if (map[player.x][player.y] == 'D' && !portaDestrancada) {
            printf("A porta esta trancada! Encontre a chave para destranca-la.\n");
        }

        if (player.x == 7 && player.y == MAP_SIZE_1 - 2 && portaDestrancada) {
            printf("Voce atravessou a porta e passou para a Fase 2!\n");
            jogarFase2();
            return;
        }

        if (toquesMonstro(player.x, player.y, monstro_x, monstro_y)) {
            printf("Voce tocou no monstro! A fase sera reiniciada.\n");
            toquesMonstroCount++;
            if (toquesMonstroCount >= 3) {
                printf("Voce tocou no monstro 3 vezes! Game Over.\n");
                printf("Pressione qualquer tecla para voltar ao menu principal.\n");
                getchar();
                limparBuffer();
                return;
            }
            player.x = 1;
            player.y = 1;
            chavePega = false;
            portaDestrancada = false;
        }

       
    }
}

void jogarFase2() {
    char map[MAP_SIZE_2][MAP_SIZE_2] = {
        {'*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*'},
        {'*', ' ', ' ', ' ', 'X', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '*'},
        {'*', ' ', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', ' ', '*'},
        {'*', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '*'},
        {'*', ' ', '*', '*', ' ', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', ' ', '*'},
        {'*', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '*'},
        {'*', ' ', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', ' ', '*'},
        {'*', '@', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '*'},
        {'*', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '*'},
        {'*', ' ', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', ' ', '*'},
        {'*', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '*'},
        {'*', ' ', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', ' ', '*'},
        {'*', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '*'},
        {'*', ' ', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', ' ', '*'},
        {'*', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '*'},
        {'*', ' ', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', ' ', '*'},
        {'*', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '*'},
        {'*', ' ', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', ' ', '*'},
        {'*', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '*'},
        {'*', '*', 'D', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*'}
    };

    Player player = {1, 1};
    char comando[5]; 
    int chave_x = 7;
    int chave_y = 1;
    bool chavePega = false;
    bool portaDestrancada = false;
    int monstro_x = 10; 
    int monstro_y = 10; 
    int toquesMonstroCount = 0;
    int espinhosCount = 0;
    int i, j;

    while (true) {
        system("cls");

        printf("##########################################\n");
        printf("#                FASE 2                  #\n");
        printf("##########################################\n\n");

        for (i = 0; i < MAP_SIZE_2; i++) {
            for (j = 0; j < MAP_SIZE_2; j++) {
                if (i == player.x && j == player.y)
                    printf("& ");
                else
                    printf("%c ", map[i][j]);
            }
            printf("\n");
        }

        printf("\nDigite um comando (w, a, s, d para mover; i para interagir): ");
        scanf("%4s", comando);
        limparBuffer();

        int dx = 0, dy = 0;
        if (strcmp(comando, "w") == 0)
            dx = -1;
        else if (strcmp(comando, "a") == 0)
            dy = -1;
        else if (strcmp(comando, "s") == 0)
            dx = 1;
        else if (strcmp(comando, "d") == 0)
            dy = 1;
        else if (strcmp(comando, "i") == 0) {
            if (player.x == chave_x && player.y == chave_y && !chavePega) {
                printf("Voce pegou a chave!\n");
                chavePega = true;
                map[chave_x][chave_y] = ' '; 
                portaDestrancada = true;

                // Abrir as portas automaticamente quando a chave é pega
                for (i = 0; i < MAP_SIZE_2; i++) {
                    for (j = 0; j < MAP_SIZE_2; j++) {
                        if (map[i][j] == 'D')
                            map[i][j] = '=';
                    }
                }
            } else if (map[player.x][player.y] == 'D' && chavePega) {
                printf("Voce abriu a porta!\n");
                map[player.x][player.y] = '='; 
                portaDestrancada = true;
            }
        } else {
            printf("Comando invalido. Tente novamente.\n");
        }

        int new_x = player.x + dx;
        int new_y = player.y + dy;
        if (new_x >= 0 && new_x < MAP_SIZE_2 && new_y >= 0 && new_y < MAP_SIZE_2 && map[new_x][new_y] != '*') {
            player.x = new_x;
            player.y = new_y;
        }

        if (map[player.x][player.y] == 'D' && !portaDestrancada) {
            printf("A porta esta trancada! Encontre a chave para destranca-la.\n");
        }

        if (player.x == 7 && player.y == MAP_SIZE_2 - 2 && portaDestrancada) {
            printf("Voce atravessou a porta e concluiu o jogo!\n");
            printf("Pressione qualquer tecla para voltar ao menu principal.\n");
            getchar();
            limparBuffer();
            return;
        }

        if (map[player.x][player.y] == '#') {
            printf("");
            espinhosCount++;
            if (espinhosCount >= 3) {
                printf("-----------\n|GAME OVER|\n-----------");
                printf("Pressione qualquer tecla para voltar ao menu principal.\n");
                getchar();
                limparBuffer();
                return;
            }
            player.x = 1;
            player.y = 1;
            chavePega = false;
            portaDestrancada = false;
        }

        if (toquesMonstro(player.x, player.y, monstro_x, monstro_y)) {
            printf("");
            toquesMonstroCount++;
            if (toquesMonstroCount >= 3) {
                printf("-----------\n|GAME OVER|\n-----------");
                printf("Pressione qualquer tecla para voltar ao menu principal.\n");
                getchar();
                limparBuffer();
                return;
            }
            player.x = 1;
            player.y = 1;
            chavePega = false;
            portaDestrancada = false;
        }

        movimentarMonstro(&monstro_x, &monstro_y, map);
    }
}

void exibirMenu() {
    int opcao;
    do {
        system("cls");
        printf("##########################################\n");
        printf("#                MENU                    #\n");
        printf("##########################################\n\n");
        printf("1. Jogar\n");
        printf("2. Tutorial\n");
        printf("3. Sair\n\n");
        printf("Escolha uma opcao: ");
        scanf("%d", &opcao);
        limparBuffer();

        switch (opcao) {
            case 1:
                jogarFase1();
                break;
            case 2:
                mostrarTutorial();
                break;
            case 3:
                printf("Saindo do jogo...\n");
                break;
            default:
                printf("Opcao invalida. Tente novamente.\n");
        }
    } while (opcao != 3);
}

int main() {
    srand(time(NULL));
    exibirMenu();
    return 0;
}
